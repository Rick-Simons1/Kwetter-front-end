name: Node.js CI

on:
  push:
    branches: [ Production ]
  pull_request:
    branches: [ Production ]
    
env:
  REGISTRY_NAME: 'kwetters6'
  CLUSTER_NAME: 'kwetters6'
  CLUSTER_RESOURCE_GROUP: 'kwetter_s6_kubernetes_resource_group'
  NAMESPACE: 'default'
  SECRET: 'githubdeploymentsecret'
  APP_NAME: 'frontend'
  APP_VERSION: 'v0.1.8'

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
    # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './package-lock.json'
    - run: npm ci
    - run: npm run build --if-present
#     - run: npm test
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         todo: add to secrets vault in github
        SONAR_TOKEN: 3f4e3bd05a233f7f2002079a770e94e89262edf2
  build_and_deploy_job:
    needs: [build]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GENTLE_STONE_0110FA403 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "dist/kwetter-front-end" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GENTLE_STONE_0110FA403 }}
          action: "close"
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan the webapplication
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'https://gentle-stone-0110fa403.1.azurestaticapps.net/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
#   azure-deployment:
#     needs: [build]
#     name: Azure deployment
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@main
    
#     # Connect to Azure Container Registry (ACR)
#     - uses: azure/docker-login@v1
#       with:
#         login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
#         username: ${{ secrets.REGISTRY_USERNAME }} 
#         password: ${{ secrets.REGISTRY_PASSWORD }}
    
#     # Container build and push to a Azure Container Registry (ACR)
#     - run: |
#         docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
#         docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
#       working-directory: ./
      
#     # Set the target Azure Kubernetes Service (AKS) cluster. 
#     - uses: azure/aks-set-context@v1
#       with:
#         creds: '${{ secrets.AZURE_CREDENTIALS }}'
#         cluster-name: ${{ env.CLUSTER_NAME }}
#         resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        
#     # Create image pull secret for ACR
#     - uses: azure/k8s-create-secret@v1
#       with:
#         container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
#         container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
#         container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
#         secret-name: ${{ env.SECRET }}
#         namespace: ${{ env.NAMESPACE }}
#         arguments: --force true
#     # Deploy app to AKS
#     - uses: azure/k8s-deploy@v1
#       with:
#         manifests: |
#           ${{ github.workspace }}/k8s/deployment.yaml
#         images: |
#           ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
#         imagepullsecrets: |
#           ${{ env.SECRET }}
#         namespace: ${{ env.NAMESPACE }}
    
